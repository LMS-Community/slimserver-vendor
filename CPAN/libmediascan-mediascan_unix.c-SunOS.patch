*** src/mediascan_unix.c	Sun Nov 20 23:37:19 2011
--- src/mediascan_unix.c	Sun Apr 29 12:25:37 2012
***************
*** 29,35 ****
  ///-------------------------------------------------------------------------------------------------
  
  void recurse_dir(MediaScan *s, const char *path, int recurse_count) {
!   char *dir, *p;
    char tmp_full_path[MAX_PATH_STR_LEN];
    DIR *dirp;
    struct dirent *dp;
--- 29,35 ----
  ///-------------------------------------------------------------------------------------------------
  
  void recurse_dir(MediaScan *s, const char *path, int recurse_count) {
!   char *dir, *realdir, *p;
    char tmp_full_path[MAX_PATH_STR_LEN];
    DIR *dirp;
    struct dirent *dp;
***************
*** 89,99 ****
    if (isAlias(dir)) {
      FollowLink(dir, redirect_dir);
      LOG_INFO("Resolving symlink %s to %s\n", dir, redirect_dir);
!     strcpy(dir, redirect_dir);
    }
  #endif
  
!   if ((dirp = opendir(dir)) == NULL) {
      LOG_ERROR("Unable to open directory %s: %s\n", dir, strerror(errno));
      goto out;
    }
--- 89,102 ----
    if (isAlias(dir)) {
      FollowLink(dir, redirect_dir);
      LOG_INFO("Resolving symlink %s to %s\n", dir, redirect_dir);
!     realdir = redirect_dir;
    }
  #endif
+   else {
+       realdir = dir;
+   }
  
!   if ((dirp = opendir(realdir)) == NULL) {
      LOG_ERROR("Unable to open directory %s: %s\n", dir, strerror(errno));
      goto out;
    }
***************
*** 110,126 ****
        if (unlikely(s->_want_abort))
          break;
  
        // XXX some platforms may be missing d_type/DT_DIR
!       if (dp->d_type == DT_DIR) {
          // Add to list of subdirectories we need to recurse into
          struct dirq_entry *subdir_entry = malloc(sizeof(struct dirq_entry));
  
-         // Construct full path
-         //*tmp_full_path = 0;
-         strcpy(tmp_full_path, dir);
-         strcat(tmp_full_path, "/");
-         strcat(tmp_full_path, name);
- 
          if (_should_scan_dir(s, tmp_full_path)) {
            subdir_entry->dir = strdup(tmp_full_path);
            SIMPLEQ_INSERT_TAIL(subdirq, subdir_entry, entries);
--- 113,129 ----
        if (unlikely(s->_want_abort))
          break;
  
+       // Construct full path
+         //*tmp_full_path = 0;
+       strcpy(tmp_full_path, dir);
+       strcat(tmp_full_path, "/");
+       strcat(tmp_full_path, name);
+ 
        // XXX some platforms may be missing d_type/DT_DIR
!       if (PathIsDirectory(tmp_full_path)) {
          // Add to list of subdirectories we need to recurse into
          struct dirq_entry *subdir_entry = malloc(sizeof(struct dirq_entry));
  
          if (_should_scan_dir(s, tmp_full_path)) {
            subdir_entry->dir = strdup(tmp_full_path);
            SIMPLEQ_INSERT_TAIL(subdirq, subdir_entry, entries);
***************
*** 165,180 ****
            if (isAlias(name)) {
              char full_name[MAX_PATH_STR_LEN];
  
!             printf("Linux Alias detected\n");
  
              strcpy(full_name, dir);
!             strcat(full_name, "\\");
              strcat(full_name, name);
              FollowLink(full_name, redirect_dir);
              if (PathIsDirectory(redirect_dir)) {
                struct dirq_entry *subdir_entry = malloc(sizeof(struct dirq_entry));
  
!               subdir_entry->dir = strdup(redirect_dir);
                SIMPLEQ_INSERT_TAIL(subdirq, subdir_entry, entries);
  
                LOG_INFO(" subdir: %s\n", tmp_full_path);
--- 168,183 ----
            if (isAlias(name)) {
              char full_name[MAX_PATH_STR_LEN];
  
!             LOG_INFO("Linux Alias detected for %s\n", name);
  
              strcpy(full_name, dir);
!             strcat(full_name, "/");
              strcat(full_name, name);
              FollowLink(full_name, redirect_dir);
              if (PathIsDirectory(redirect_dir)) {
                struct dirq_entry *subdir_entry = malloc(sizeof(struct dirq_entry));
  
!               subdir_entry->dir = strdup(full_name);
                SIMPLEQ_INSERT_TAIL(subdirq, subdir_entry, entries);
  
                LOG_INFO(" subdir: %s\n", tmp_full_path);
*** src/mediascan.c	Mon Nov 21 13:45:04 2011
--- src/mediascan.c	Sun Apr 29 15:03:35 2012
***************
*** 1181,1187 ****
    }
  #elif defined(__linux__)
    if (isAlias(full_path)) {
!     LOG_INFO("File is a linux symlink\n");
      // Check if this file is a shortcut and if so resolve it
      FollowLink(full_path, tmp_full_path);
    }
--- 1181,1187 ----
    }
  #elif defined(__linux__)
    if (isAlias(full_path)) {
!       LOG_INFO("File %s is a linux symlink\n", full_path);
      // Check if this file is a shortcut and if so resolve it
      FollowLink(full_path, tmp_full_path);
    }
***************
*** 1212,1219 ****
    // Setup DBT values
    memset(&key, 0, sizeof(DBT));
    memset(&data, 0, sizeof(DBT));
!   key.data = (char *)tmp_full_path;
!   key.size = strlen(tmp_full_path) + 1;
    data.data = &hash;
    data.size = sizeof(uint32_t);
  
--- 1212,1219 ----
    // Setup DBT values
    memset(&key, 0, sizeof(DBT));
    memset(&data, 0, sizeof(DBT));
!   key.data = (char *)full_path;
!   key.size = strlen(full_path) + 1;
    data.data = &hash;
    data.size = sizeof(uint32_t);
  
***************
*** 1251,1257 ****
      return;
  
    r->type = type;
!   r->path = strdup(tmp_full_path);
  
    if (result_scan(r)) {
      // These were determined by HashFile
--- 1251,1257 ----
      return;
  
    r->type = type;
!   r->path = strdup(full_path);
  
    if (result_scan(r)) {
      // These were determined by HashFile
*** src/mediascan_linux.c	Sun Nov 20 23:37:19 2011
--- src/mediascan_linux.c	Sun Apr 29 12:25:37 2012
***************
*** 7,12 ****
--- 7,13 ----
  #include <sys/stat.h>
  #include <unistd.h>
  #include <stdlib.h>
+ #include <string.h>
  #include <libmediascan.h>
  #include <errno.h>
  
***************
*** 30,52 ****
  
  int FollowLink(const char *incoming_path, char *out_path) {
  
!   char buf[MAX_PATH_STR_LEN];
! //char buf2[MAX_PATH_STR_LEN];
    ssize_t len;
  
    if ((len = readlink(incoming_path, buf, MAX_PATH_STR_LEN - 1)) != -1) {
      buf[len] = '\0';
- //    strcpy(buf2, buf);
  
      // Check if this is a relative path
!     if (buf[0] == '.')
!       realpath(buf, out_path);
      else
        strcpy(out_path, buf);
    }
    else {
      strcpy(out_path, "");
!     printf("readlink %s failed: %d\n", incoming_path, errno);
    }
  
    return LINK_SYMLINK;
--- 31,63 ----
  
  int FollowLink(const char *incoming_path, char *out_path) {
  
!     char buf[MAX_PATH_STR_LEN], *rval;
    ssize_t len;
  
    if ((len = readlink(incoming_path, buf, MAX_PATH_STR_LEN - 1)) != -1) {
      buf[len] = '\0';
  
      // Check if this is a relative path
!     if (buf[0] != '/') {
! 	char buf2[MAX_PATH_STR_LEN];
! 	strcpy(buf2, incoming_path);
! 	rval = strrchr(buf2, '/');
! 	if (rval != NULL) {
! 	    rval++;
! 	    strcpy(rval, buf);
! 	    rval = realpath(buf2, out_path);
! 	    LOG_INFO("realpath(%s), returned %s, gave %s\n", buf2, rval == NULL?"NULL":"Ptr", out_path);
! 	}
! 	else {
! 	    LOG_INFO("No \"/\" in %s\n", buf2);
! 	}
!     }
      else
        strcpy(out_path, buf);
    }
    else {
      strcpy(out_path, "");
!     LOG_ERROR("readlink %s failed: %d\n", incoming_path, errno);
    }
  
    return LINK_SYMLINK;
***************
*** 60,69 ****
      return 0;
  
    // Get the status of the file
-   if (S_ISREG(st_buf.st_mode)) {
-     return 0;                   //return false if path is a regular file
-   }
    if (S_ISDIR(st_buf.st_mode)) {
      return 1;                   //return true if path is a directory
    }
  }                               /* PathIsDirectory() */
--- 71,78 ----
      return 0;
  
    // Get the status of the file
    if (S_ISDIR(st_buf.st_mode)) {
      return 1;                   //return true if path is a directory
    }
+   return 0;
  }                               /* PathIsDirectory() */

*** src/mediascan.h	Sun Nov 20 23:37:19 2011
--- src/mediascan.h	Sun Apr 29 12:25:37 2012
***************
*** 168,171 ****
--- 168,173 ----
  
  #endif // WIN32
  
+ int PathIsDirectory(const char *dir);
+ 
  #endif // MEDIASCAN_H
